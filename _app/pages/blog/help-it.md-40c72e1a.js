import{S as a,i as s,s as n,e,k as t,c as o,a as p,n as l,d as c,b as i,f as r,F as u,G as k,t as g,j as d,g as m,m as h,o as f,x as v,u as E,v as b}from"../../chunks/vendor-3d48a7dc.js";function P(a){let s,n,g,d,m,h,f;return{c(){s=e("picture"),n=e("source"),g=t(),d=e("source"),m=t(),h=e("img"),this.h()},l(a){s=o(a,"PICTURE",{});var e=p(s);n=o(e,"SOURCE",{srcset:!0,type:!0}),g=l(e),d=o(e,"SOURCE",{srcset:!0,type:!0}),m=l(e),h=o(e,"IMG",{src:!0,alt:!0}),e.forEach(c),this.h()},h(){i(n,"srcset",a[0]),i(n,"type","image/webp"),i(d,"srcset",a[1]),i(d,"type","image/jpeg"),h.src!==(f=a[0])&&i(h,"src",f),i(h,"alt",a[2])},m(a,e){r(a,s,e),u(s,n),u(s,g),u(s,d),u(s,m),u(s,h)},p(a,[s]){1&s&&i(n,"srcset",a[0]),2&s&&i(d,"srcset",a[1]),1&s&&h.src!==(f=a[0])&&i(h,"src",f),4&s&&i(h,"alt",a[2])},i:k,o:k,d(a){a&&c(s)}}}function w(a,s,n){let{imageJPG:e}=s,{imageWEBP:t}=s,{alt:o}=s;return a.$$set=a=>{"imageJPG"in a&&n(0,e=a.imageJPG),"imageWEBP"in a&&n(1,t=a.imageWEBP),"alt"in a&&n(2,o=a.alt)},[e,t,o]}class y extends a{constructor(a){super(),s(this,a,w,P,n,{imageJPG:0,imageWEBP:1,alt:2})}}function C(a){let s,n,P,w,C,H,j,z,M,D,x,L,O,I,S,A,T,R,G,B,U,K,$,J,N,W,Q,_,F,Y,V,X,Z,aa,sa,na,ea,ta,oa,pa,la,ca,ia,ra,ua,ka,ga,da,ma,ha,fa,va,Ea,ba,Pa,wa,ya,Ca,Ha,qa,ja,za,Ma,Da,xa,La,Oa,Ia,Sa,Aa,Ta,Ra,Ga,Ba,Ua,Ka,$a,Ja,Na,Wa,Qa,_a,Fa,Ya,Va,Xa,Za,as,ss,ns,es,ts,os,ps,ls,cs,is,rs,us,ks,gs,ds,ms,hs,fs,vs,Es,bs,Ps,ws,ys,Cs,Hs,qs,js,zs,Ms,Ds,xs,Ls,Os,Is,Ss,As,Ts,Rs,Gs,Bs,Us,Ks,$s,Js,Ns,Ws,Qs,_s,Fs,Ys,Vs,Xs,Zs,an,sn,nn,en,tn,on,pn,ln,cn,rn,un,kn,gn,dn,mn,hn,fn,vn,En,bn,Pn,wn,yn,Cn,Hn,qn,jn,zn,Mn,Dn,xn,Ln,On,In,Sn,An,Tn,Rn,Gn,Bn,Un,Kn,$n,Jn,Nn,Wn,Qn,_n,Fn,Yn,Vn,Xn,Zn,ae,se,ne,ee,te,oe,pe,le,ce,ie,re,ue,ke,ge,de,me,he,fe,ve,Ee,be,Pe,we,ye,Ce,He,qe,je,ze,Me,De,xe,Le,Oe,Ie,Se,Ae,Te,Re,Ge,Be,Ue,Ke,$e,Je,Ne,We,Qe,_e,Fe,Ye,Ve,Xe,Ze,at,st,nt,et,tt,ot,pt,lt,ct,it,rt,ut,kt,gt,dt,mt,ht,ft,vt,Et,bt,Pt,wt,yt,Ct,Ht,qt,jt,zt,Mt,Dt,xt,Lt,Ot,It,St,At,Tt,Rt,Gt,Bt,Ut,Kt,$t,Jt,Nt,Wt,Qt,_t,Ft,Yt,Vt,Xt,Zt,ao,so,no,eo,to,oo,po,lo,co,io,ro,uo,ko,go,mo,ho,fo,vo,Eo,bo,Po,wo,yo,Co,Ho,qo,jo,zo,Mo,Do,xo,Lo,Oo,Io,So,Ao,To,Ro,Go,Bo,Uo,Ko,$o,Jo,No,Wo,Qo,_o,Fo,Yo,Vo,Xo,Zo,ap,sp,np,ep,tp,op,pp,lp,cp,ip,rp,up,kp,gp,dp,mp,hp,fp,vp,Ep,bp,Pp,wp,yp,Cp,Hp,qp,jp,zp,Mp,Dp,xp,Lp,Op,Ip,Sp,Ap,Tp,Rp,Gp,Bp,Up;return Ka=new y({props:{imageJPG:"/memento-sveltekit-and-github-pages/_app/assets/settings.dbf20e56.jpg",imageWEB:"/memento-sveltekit-and-github-pages/_app/assets/settings.58715aa0.webp",alt:"Settings"}}),{c(){s=e("h1"),n=g(q),P=t(),w=e("p"),C=g("Era da qualche settimane che volevo scrivere un nuovo articolo su come usare Svelte con GitHub Pages. Devo ammettere che lo sprone sono state alcune mail con richieste di chiarimenti sul mio "),H=e("a"),j=g("post precedete"),z=g(". Aggiungo quindi un altro tassello alla mia esplorazione di Svelte parlando di come penso sia possibile usare SvelteKit con GitHub Pages."),M=t(),D=e("p"),x=g("Tengo sempre la forma "),L=e("em"),O=g("diario di viaggio"),I=g(": riporto qui i passaggi che sto compiendo, sperando sia sufficiente per riprodurre in futuro lo stesso risultato."),S=t(),A=e("p"),T=g("Per prima cosa creo un nuovo progetto basato su "),R=e("a"),G=g("SvelteKit"),B=g(" digitando:"),U=t(),K=e("pre"),$=t(),J=e("p"),N=g("Installo quindi le varie dipendenze"),W=t(),Q=e("pre"),_=t(),F=e("p"),Y=g("Per semplificare la pubblicazione su GitHub Pages uso ancora una volta "),V=e("a"),X=g("gh-pages"),Z=g(":"),aa=t(),sa=e("pre"),na=t(),ea=e("p"),ta=g("Aggiungo lo script su "),oa=e("code"),pa=g("package.json"),la=g(":"),ca=t(),ia=e("pre"),ra=t(),ua=e("p"),ka=g("E quindi creo il file gh-pages.js:"),ga=t(),da=e("pre"),ma=t(),ha=e("p"),fa=g("Per pubblicare su GitHub mi serve l’"),va=e("a"),Ea=g("adapter-static"),ba=g(":"),Pa=t(),wa=e("pre"),ya=t(),Ca=e("p"),Ha=g("Aggiorno quindi il file "),qa=e("code"),ja=g("svelte.config.js"),za=t(),Ma=e("pre"),Da=t(),xa=e("p"),La=g("Se eseguo il comando"),Oa=t(),Ia=e("pre"),Sa=t(),Aa=e("p"),Ta=g("Otterrò una cartella "),Ra=e("code"),Ga=g("build"),Ba=g(" nella root del progetto. Bene, questa sarà la cartella da caricare su GitHub Pages. Ma prima devo configurare il repository in maniera corretta."),Ua=t(),d(Ka.$$.fragment),$a=t(),Ja=e("p"),Na=g("Imposto come origine del sito la branch "),Wa=e("code"),Qa=g("gh-pages"),_a=g(" e, in caso, imposto un dominio personalizzato."),Fa=t(),Ya=e("p"),Va=g("Mi servono poi altri 2 file, entrambi da inserire nella cartella "),Xa=e("code"),Za=g("static"),as=g(":"),ss=t(),ns=e("ul"),es=e("li"),ts=e("code"),os=g(".nojekyll"),ps=g(", per evitare che sia Jekyll a gestire le pagine create (see "),ls=e("a"),cs=g("Bypassing Jekyll on GitHub Pages"),is=g(")"),rs=t(),us=e("li"),ks=e("code"),gs=g("CNAME"),ds=g(", per permette a GitHub Pages di usare il dominio personalizzato che ho impostato."),ms=t(),hs=e("p"),fs=g("Il primo file, "),vs=e("code"),Es=g(".nojekyll"),bs=g(" è un file vuoto. Basta crearlo e non scriverci dentro nulla."),Ps=t(),ws=e("p"),ys=e("code"),Cs=g("CNAME"),Hs=g(", invece, contiene una sola riga: il nome del dominio, in questo formato:"),qs=t(),js=e("pre"),zs=t(),Ms=e("p"),Ds=g("Fatto questo posso ricompilare il sito con "),xs=e("code"),Ls=g("npm run build"),Os=g(" e poi usare"),Is=t(),Ss=e("pre"),As=t(),Ts=e("p"),Rs=g("per caricarlo online."),Gs=t(),Bs=e("p"),Us=g("In fase di sviluppo è comodo anche il comando"),Ks=t(),$s=e("pre"),Js=t(),Ns=e("p"),Ws=g("Per vedere in tempo reale le modifiche fatte al codice."),Qs=t(),_s=e("p"),Fs=g("Provo ad aggiungere una nuova pagina, "),Ys=e("code"),Vs=g("about.svelte"),Xs=g(". Basta creare un nuovo componente nella cartella "),Zs=e("code"),an=g("src\\routes"),sn=g("."),nn=t(),en=e("p"),tn=g("Questo può andare bene per un sito statico. E se invece volessi creare qualcosa di simile ad un blog?"),on=t(),pn=e("p"),ln=g("Qui la questione è un po’ più complicata. Ho trovato alcuni post e video in rete:"),cn=t(),rn=e("ul"),un=e("li"),kn=e("a"),gn=g("SvelteKit Blog"),dn=g(" - grazie John per il link!"),mn=t(),hn=e("li"),fn=e("a"),vn=g("Sveltekit Markdown Blog"),En=t(),bn=e("li"),Pn=e("a"),wn=g("How to Create a Blog with SvelteKit and Strapi"),yn=t(),Cn=e("li"),Hn=e("a"),qn=g("How to create a blog with SvelteKit and dev.to API"),jn=t(),zn=e("p"),Mn=g("E altri ancora. Non sono davvero soddisfatto di nessuna delle soluzioni proposte. Ma non ho ancora una mia proposta. Mi limito per il momento a unire alcuni passaggi dei diversi. Devo però fare un ringraziamento particolare a "),Dn=e("a"),xn=g("WebJeda"),Ln=g(" per i suoi video e i suoi post."),On=t(),In=e("p"),Sn=g("Detto questo, mi serve qualche altro strumento. Per cominciare mi serve "),An=e("a"),Tn=g("trash-cli"),Rn=g(" per ripulire la cartella "),Gn=e("code"),Bn=g("build"),Un=g(" prima di ogni comando "),Kn=e("code"),$n=g("npm run build"),Jn=t(),Nn=e("pre"),Wn=t(),Qn=e("p"),_n=g("Aggiungo un nuovo script a "),Fn=e("code"),Yn=g("package.json"),Vn=g(" e aggiorno "),Xn=e("code"),Zn=g("build"),ae=g(":"),se=t(),ne=e("pre"),ee=t(),te=e("p"),oe=g("Passo quindi a importare "),pe=e("a"),le=g("mdsvex"),ce=t(),ie=e("pre"),re=t(),ue=e("p"),ke=g("e in successione uso "),ge=e("a"),de=g("svelte-add/mdsvex"),me=g(":"),he=t(),fe=e("pre"),ve=t(),Ee=e("p"),be=e("code"),Pe=g("mdsvex"),we=g(" mi permette di usare le pagine "),ye=e("code"),Ce=g("markdown"),He=g(" come se fossero dei componenti svelte. Anche come pagine di un router di SvelteKit. C’è un file di configurazione, "),qe=e("code"),je=g("mdsvex.config.js"),ze=g(":"),Me=t(),De=e("pre"),xe=t(),Le=e("p"),Oe=g("Il file "),Ie=e("code"),Se=g("svelte.config.js"),Ae=g(" viene modificato in modo da gestire il markdown:"),Te=t(),Re=e("pre"),Ge=t(),Be=e("p"),Ue=g("Come prova posso creare alcuni post di un blog fittizio. Creo la cartella "),Ke=e("code"),$e=g("src/routes/blog"),Je=g(" e dentro inserisco alcuni file "),Ne=e("code"),We=g(".md"),Qe=g("."),_e=t(),Fe=e("pre"),Ye=t(),Ve=e("p"),Xe=g("Dopo aver rieseguito "),Ze=e("code"),at=g("npm run dev"),st=g(" posso vedere il risultato alla pagina "),nt=e("code"),et=g("http://localhost:3000/blog/hello-world"),tt=t(),ot=e("p"),pt=g("La cosa bella è che è possibile usare Svelte dentro il file. Posso per esempio impostare il titolo della pagina con:"),lt=t(),ct=e("pre"),it=t(),rt=e("p"),ut=g("e usare dei componenti definiti altrove:"),kt=t(),gt=e("pre"),dt=t(),mt=e("p"),ht=g("È invece un po’ più complessa la gestione delle immagini. Non so ancora quale sia il metodo migliore. Uno prevede di inserire tutte le immagini nella cartella "),ft=e("code"),vt=g("static"),Et=g(" e poi richiamarle da lì:"),bt=t(),Pt=e("pre"),wt=t(),yt=e("p"),Ct=g("In alternativa si possono inserire in una cartella dentro "),Ht=e("code"),qt=g("lib"),jt=g(" e poi importarle come componenti:"),zt=t(),Mt=e("pre"),Dt=t(),xt=e("p"),Lt=g("Un altro aspetto da tenere presente quando si crea un blog è la necessità di gestire l’home page in maniera dinamica. Posso ottenere qualcosa di carino creando un componente "),Ot=e("code"),It=g("src/routes/blog/index.svelte"),St=g(" e usando la funzione "),At=e("a"),Tt=g("load()"),Rt=g("."),Gt=t(),Bt=e("p"),Ut=g("Comincio con l’importare nel componente un array con un riferimento a tutti file con estensione "),Kt=e("code"),$t=g("md"),Jt=g(" nella cartella:"),Nt=t(),Wt=e("pre"),Qt=t(),_t=e("p"),Ft=g("Estraggo da quell’array le informazioni che mi servono: "),Yt=e("code"),Vt=g("path"),Xt=g(", ovvero la posizione del file, e "),Zt=e("code"),ao=g("metadata"),so=g(", che non è altro che il contenuto YAML del file stesso"),no=t(),eo=e("pre"),to=t(),oo=e("p"),po=g("Infine passo al componente quello che mi serve per creare l’indice:"),lo=t(),co=e("pre"),io=t(),ro=e("p"),uo=g("Il resto del componente è abbastanza semplice:"),ko=t(),go=e("pre"),mo=t(),ho=e("p"),fo=g("Un’altra funzione interessante sono i "),vo=e("a"),Eo=g("layouts"),bo=g(", ovvero delle specie di template. Per esempio, posso creare un componente "),Po=e("code"),wo=g("src/routes/blog/__layout.svelte"),yo=g(":"),Co=t(),Ho=e("pre"),qo=t(),jo=e("p"),zo=g("Per inserire un menù di sopra ogni pagina del blog."),Mo=t(),Do=e("p"),xo=g("Un altro aspetto da sistemare riguarda il codice. O, meglio, come appare il codice. "),Lo=e("code"),Oo=g("mdsvx"),Io=g(" ha la possibilità di applicare degli stili in maniera quasi automatica. Su questo punto non ho trovato molte indicazioni chiare. Per me ha funzionato scaricare uno stile da "),So=e("a"),Ao=g("prismjs"),To=g(". Poi ho copiato il file css (che ho chiamato prism.css) nella cartella "),Ro=e("code"),Go=g("static"),Bo=g(". Infine ho aggiunto un riferimento al foglio di stile al file "),Uo=e("code"),Ko=g("src\\app.html"),$o=g("-"),Jo=t(),No=e("pre"),Wo=t(),Qo=e("p"),_o=g("In alternativa posso inserire nel layout:"),Fo=t(),Yo=e("pre"),Vo=t(),Xo=e("p"),Zo=g("Un altro problema che può sorgere è legato a dove viene caricato il blog. Se lo carico su un dominio unico, per esempio su "),ap=e("code"),sp=g("test.stranianelli.com"),np=g(" allora posso accedere alle varie pagine andando su indirizzi simili a "),ep=e("code"),tp=g("test.stranianelli/blog/first-post"),op=g("."),pp=t(),lp=e("p"),cp=g("Però le cose sono diverse se carico il tutto in una cartella non root. Per poter far funzionare il tutto devo modificare il file "),ip=e("code"),rp=g("svelte.config.js"),up=g(", per esempio così:"),kp=t(),gp=e("pre"),dp=t(),mp=e("p"),hp=g("Questo mi permette di configurare meglio i link usando qualcosa di simile a:"),fp=t(),vp=e("pre"),Ep=t(),bp=e("p"),Pp=g("Per oggi è tutto. Il codice è disponibile su GitHub:"),wp=t(),yp=e("ul"),Cp=e("li"),Hp=e("a"),qp=g("MEMENTO - SvelteKit & GitHub Pages"),jp=t(),zp=e("p"),Mp=g("Il blog invece è visibile all’indirizzo "),Dp=e("a"),xp=g("el3um4s.github.io/memento-sveltekit-and-github-pages"),Lp=g("."),Op=t(),Ip=e("p"),Sp=g("Ricordo inoltre l’indirizzo del mio Patreon:"),Ap=t(),Tp=e("ul"),Rp=e("li"),Gp=e("a"),Bp=g("Patreon"),this.h()},l(a){s=o(a,"H1",{});var e=p(s);n=m(e,q),e.forEach(c),P=l(a),w=o(a,"P",{});var t=p(w);C=m(t,"Era da qualche settimane che volevo scrivere un nuovo articolo su come usare Svelte con GitHub Pages. Devo ammettere che lo sprone sono state alcune mail con richieste di chiarimenti sul mio "),H=o(t,"A",{href:!0,rel:!0});var i=p(H);j=m(i,"post precedete"),i.forEach(c),z=m(t,". Aggiungo quindi un altro tassello alla mia esplorazione di Svelte parlando di come penso sia possibile usare SvelteKit con GitHub Pages."),t.forEach(c),M=l(a),D=o(a,"P",{});var r=p(D);x=m(r,"Tengo sempre la forma "),L=o(r,"EM",{});var u=p(L);O=m(u,"diario di viaggio"),u.forEach(c),I=m(r,": riporto qui i passaggi che sto compiendo, sperando sia sufficiente per riprodurre in futuro lo stesso risultato."),r.forEach(c),S=l(a),A=o(a,"P",{});var k=p(A);T=m(k,"Per prima cosa creo un nuovo progetto basato su "),R=o(k,"A",{href:!0,rel:!0});var g=p(R);G=m(g,"SvelteKit"),g.forEach(c),B=m(k," digitando:"),k.forEach(c),U=l(a),K=o(a,"PRE",{class:!0}),p(K).forEach(c),$=l(a),J=o(a,"P",{});var d=p(J);N=m(d,"Installo quindi le varie dipendenze"),d.forEach(c),W=l(a),Q=o(a,"PRE",{class:!0}),p(Q).forEach(c),_=l(a),F=o(a,"P",{});var f=p(F);Y=m(f,"Per semplificare la pubblicazione su GitHub Pages uso ancora una volta "),V=o(f,"A",{href:!0,rel:!0});var v=p(V);X=m(v,"gh-pages"),v.forEach(c),Z=m(f,":"),f.forEach(c),aa=l(a),sa=o(a,"PRE",{class:!0}),p(sa).forEach(c),na=l(a),ea=o(a,"P",{});var E=p(ea);ta=m(E,"Aggiungo lo script su "),oa=o(E,"CODE",{});var b=p(oa);pa=m(b,"package.json"),b.forEach(c),la=m(E,":"),E.forEach(c),ca=l(a),ia=o(a,"PRE",{class:!0}),p(ia).forEach(c),ra=l(a),ua=o(a,"P",{});var y=p(ua);ka=m(y,"E quindi creo il file gh-pages.js:"),y.forEach(c),ga=l(a),da=o(a,"PRE",{class:!0}),p(da).forEach(c),ma=l(a),ha=o(a,"P",{});var Up=p(ha);fa=m(Up,"Per pubblicare su GitHub mi serve l’"),va=o(Up,"A",{href:!0,rel:!0});var Kp=p(va);Ea=m(Kp,"adapter-static"),Kp.forEach(c),ba=m(Up,":"),Up.forEach(c),Pa=l(a),wa=o(a,"PRE",{class:!0}),p(wa).forEach(c),ya=l(a),Ca=o(a,"P",{});var $p=p(Ca);Ha=m($p,"Aggiorno quindi il file "),qa=o($p,"CODE",{});var Jp=p(qa);ja=m(Jp,"svelte.config.js"),Jp.forEach(c),$p.forEach(c),za=l(a),Ma=o(a,"PRE",{class:!0}),p(Ma).forEach(c),Da=l(a),xa=o(a,"P",{});var Np=p(xa);La=m(Np,"Se eseguo il comando"),Np.forEach(c),Oa=l(a),Ia=o(a,"PRE",{class:!0}),p(Ia).forEach(c),Sa=l(a),Aa=o(a,"P",{});var Wp=p(Aa);Ta=m(Wp,"Otterrò una cartella "),Ra=o(Wp,"CODE",{});var Qp=p(Ra);Ga=m(Qp,"build"),Qp.forEach(c),Ba=m(Wp," nella root del progetto. Bene, questa sarà la cartella da caricare su GitHub Pages. Ma prima devo configurare il repository in maniera corretta."),Wp.forEach(c),Ua=l(a),h(Ka.$$.fragment,a),$a=l(a),Ja=o(a,"P",{});var _p=p(Ja);Na=m(_p,"Imposto come origine del sito la branch "),Wa=o(_p,"CODE",{});var Fp=p(Wa);Qa=m(Fp,"gh-pages"),Fp.forEach(c),_a=m(_p," e, in caso, imposto un dominio personalizzato."),_p.forEach(c),Fa=l(a),Ya=o(a,"P",{});var Yp=p(Ya);Va=m(Yp,"Mi servono poi altri 2 file, entrambi da inserire nella cartella "),Xa=o(Yp,"CODE",{});var Vp=p(Xa);Za=m(Vp,"static"),Vp.forEach(c),as=m(Yp,":"),Yp.forEach(c),ss=l(a),ns=o(a,"UL",{});var Xp=p(ns);es=o(Xp,"LI",{});var Zp=p(es);ts=o(Zp,"CODE",{});var al=p(ts);os=m(al,".nojekyll"),al.forEach(c),ps=m(Zp,", per evitare che sia Jekyll a gestire le pagine create (see "),ls=o(Zp,"A",{href:!0,rel:!0});var sl=p(ls);cs=m(sl,"Bypassing Jekyll on GitHub Pages"),sl.forEach(c),is=m(Zp,")"),Zp.forEach(c),rs=l(Xp),us=o(Xp,"LI",{});var nl=p(us);ks=o(nl,"CODE",{});var el=p(ks);gs=m(el,"CNAME"),el.forEach(c),ds=m(nl,", per permette a GitHub Pages di usare il dominio personalizzato che ho impostato."),nl.forEach(c),Xp.forEach(c),ms=l(a),hs=o(a,"P",{});var tl=p(hs);fs=m(tl,"Il primo file, "),vs=o(tl,"CODE",{});var ol=p(vs);Es=m(ol,".nojekyll"),ol.forEach(c),bs=m(tl," è un file vuoto. Basta crearlo e non scriverci dentro nulla."),tl.forEach(c),Ps=l(a),ws=o(a,"P",{});var pl=p(ws);ys=o(pl,"CODE",{});var ll=p(ys);Cs=m(ll,"CNAME"),ll.forEach(c),Hs=m(pl,", invece, contiene una sola riga: il nome del dominio, in questo formato:"),pl.forEach(c),qs=l(a),js=o(a,"PRE",{class:!0}),p(js).forEach(c),zs=l(a),Ms=o(a,"P",{});var cl=p(Ms);Ds=m(cl,"Fatto questo posso ricompilare il sito con "),xs=o(cl,"CODE",{});var il=p(xs);Ls=m(il,"npm run build"),il.forEach(c),Os=m(cl," e poi usare"),cl.forEach(c),Is=l(a),Ss=o(a,"PRE",{class:!0}),p(Ss).forEach(c),As=l(a),Ts=o(a,"P",{});var rl=p(Ts);Rs=m(rl,"per caricarlo online."),rl.forEach(c),Gs=l(a),Bs=o(a,"P",{});var ul=p(Bs);Us=m(ul,"In fase di sviluppo è comodo anche il comando"),ul.forEach(c),Ks=l(a),$s=o(a,"PRE",{class:!0}),p($s).forEach(c),Js=l(a),Ns=o(a,"P",{});var kl=p(Ns);Ws=m(kl,"Per vedere in tempo reale le modifiche fatte al codice."),kl.forEach(c),Qs=l(a),_s=o(a,"P",{});var gl=p(_s);Fs=m(gl,"Provo ad aggiungere una nuova pagina, "),Ys=o(gl,"CODE",{});var dl=p(Ys);Vs=m(dl,"about.svelte"),dl.forEach(c),Xs=m(gl,". Basta creare un nuovo componente nella cartella "),Zs=o(gl,"CODE",{});var ml=p(Zs);an=m(ml,"src\\routes"),ml.forEach(c),sn=m(gl,"."),gl.forEach(c),nn=l(a),en=o(a,"P",{});var hl=p(en);tn=m(hl,"Questo può andare bene per un sito statico. E se invece volessi creare qualcosa di simile ad un blog?"),hl.forEach(c),on=l(a),pn=o(a,"P",{});var fl=p(pn);ln=m(fl,"Qui la questione è un po’ più complicata. Ho trovato alcuni post e video in rete:"),fl.forEach(c),cn=l(a),rn=o(a,"UL",{});var vl=p(rn);un=o(vl,"LI",{});var El=p(un);kn=o(El,"A",{href:!0,rel:!0});var bl=p(kn);gn=m(bl,"SvelteKit Blog"),bl.forEach(c),dn=m(El," - grazie John per il link!"),El.forEach(c),mn=l(vl),hn=o(vl,"LI",{});var Pl=p(hn);fn=o(Pl,"A",{href:!0,rel:!0});var wl=p(fn);vn=m(wl,"Sveltekit Markdown Blog"),wl.forEach(c),Pl.forEach(c),En=l(vl),bn=o(vl,"LI",{});var yl=p(bn);Pn=o(yl,"A",{href:!0,rel:!0});var Cl=p(Pn);wn=m(Cl,"How to Create a Blog with SvelteKit and Strapi"),Cl.forEach(c),yl.forEach(c),yn=l(vl),Cn=o(vl,"LI",{});var Hl=p(Cn);Hn=o(Hl,"A",{href:!0,rel:!0});var ql=p(Hn);qn=m(ql,"How to create a blog with SvelteKit and dev.to API"),ql.forEach(c),Hl.forEach(c),vl.forEach(c),jn=l(a),zn=o(a,"P",{});var jl=p(zn);Mn=m(jl,"E altri ancora. Non sono davvero soddisfatto di nessuna delle soluzioni proposte. Ma non ho ancora una mia proposta. Mi limito per il momento a unire alcuni passaggi dei diversi. Devo però fare un ringraziamento particolare a "),Dn=o(jl,"A",{href:!0,rel:!0});var zl=p(Dn);xn=m(zl,"WebJeda"),zl.forEach(c),Ln=m(jl," per i suoi video e i suoi post."),jl.forEach(c),On=l(a),In=o(a,"P",{});var Ml=p(In);Sn=m(Ml,"Detto questo, mi serve qualche altro strumento. Per cominciare mi serve "),An=o(Ml,"A",{href:!0,rel:!0});var Dl=p(An);Tn=m(Dl,"trash-cli"),Dl.forEach(c),Rn=m(Ml," per ripulire la cartella "),Gn=o(Ml,"CODE",{});var xl=p(Gn);Bn=m(xl,"build"),xl.forEach(c),Un=m(Ml," prima di ogni comando "),Kn=o(Ml,"CODE",{});var Ll=p(Kn);$n=m(Ll,"npm run build"),Ll.forEach(c),Ml.forEach(c),Jn=l(a),Nn=o(a,"PRE",{class:!0}),p(Nn).forEach(c),Wn=l(a),Qn=o(a,"P",{});var Ol=p(Qn);_n=m(Ol,"Aggiungo un nuovo script a "),Fn=o(Ol,"CODE",{});var Il=p(Fn);Yn=m(Il,"package.json"),Il.forEach(c),Vn=m(Ol," e aggiorno "),Xn=o(Ol,"CODE",{});var Sl=p(Xn);Zn=m(Sl,"build"),Sl.forEach(c),ae=m(Ol,":"),Ol.forEach(c),se=l(a),ne=o(a,"PRE",{class:!0}),p(ne).forEach(c),ee=l(a),te=o(a,"P",{});var Al=p(te);oe=m(Al,"Passo quindi a importare "),pe=o(Al,"A",{href:!0,rel:!0});var Tl=p(pe);le=m(Tl,"mdsvex"),Tl.forEach(c),Al.forEach(c),ce=l(a),ie=o(a,"PRE",{class:!0}),p(ie).forEach(c),re=l(a),ue=o(a,"P",{});var Rl=p(ue);ke=m(Rl,"e in successione uso "),ge=o(Rl,"A",{href:!0,rel:!0});var Gl=p(ge);de=m(Gl,"svelte-add/mdsvex"),Gl.forEach(c),me=m(Rl,":"),Rl.forEach(c),he=l(a),fe=o(a,"PRE",{class:!0}),p(fe).forEach(c),ve=l(a),Ee=o(a,"P",{});var Bl=p(Ee);be=o(Bl,"CODE",{});var Ul=p(be);Pe=m(Ul,"mdsvex"),Ul.forEach(c),we=m(Bl," mi permette di usare le pagine "),ye=o(Bl,"CODE",{});var Kl=p(ye);Ce=m(Kl,"markdown"),Kl.forEach(c),He=m(Bl," come se fossero dei componenti svelte. Anche come pagine di un router di SvelteKit. C’è un file di configurazione, "),qe=o(Bl,"CODE",{});var $l=p(qe);je=m($l,"mdsvex.config.js"),$l.forEach(c),ze=m(Bl,":"),Bl.forEach(c),Me=l(a),De=o(a,"PRE",{class:!0}),p(De).forEach(c),xe=l(a),Le=o(a,"P",{});var Jl=p(Le);Oe=m(Jl,"Il file "),Ie=o(Jl,"CODE",{});var Nl=p(Ie);Se=m(Nl,"svelte.config.js"),Nl.forEach(c),Ae=m(Jl," viene modificato in modo da gestire il markdown:"),Jl.forEach(c),Te=l(a),Re=o(a,"PRE",{class:!0}),p(Re).forEach(c),Ge=l(a),Be=o(a,"P",{});var Wl=p(Be);Ue=m(Wl,"Come prova posso creare alcuni post di un blog fittizio. Creo la cartella "),Ke=o(Wl,"CODE",{});var Ql=p(Ke);$e=m(Ql,"src/routes/blog"),Ql.forEach(c),Je=m(Wl," e dentro inserisco alcuni file "),Ne=o(Wl,"CODE",{});var _l=p(Ne);We=m(_l,".md"),_l.forEach(c),Qe=m(Wl,"."),Wl.forEach(c),_e=l(a),Fe=o(a,"PRE",{class:!0}),p(Fe).forEach(c),Ye=l(a),Ve=o(a,"P",{});var Fl=p(Ve);Xe=m(Fl,"Dopo aver rieseguito "),Ze=o(Fl,"CODE",{});var Yl=p(Ze);at=m(Yl,"npm run dev"),Yl.forEach(c),st=m(Fl," posso vedere il risultato alla pagina "),nt=o(Fl,"CODE",{});var Vl=p(nt);et=m(Vl,"http://localhost:3000/blog/hello-world"),Vl.forEach(c),Fl.forEach(c),tt=l(a),ot=o(a,"P",{});var Xl=p(ot);pt=m(Xl,"La cosa bella è che è possibile usare Svelte dentro il file. Posso per esempio impostare il titolo della pagina con:"),Xl.forEach(c),lt=l(a),ct=o(a,"PRE",{class:!0}),p(ct).forEach(c),it=l(a),rt=o(a,"P",{});var Zl=p(rt);ut=m(Zl,"e usare dei componenti definiti altrove:"),Zl.forEach(c),kt=l(a),gt=o(a,"PRE",{class:!0}),p(gt).forEach(c),dt=l(a),mt=o(a,"P",{});var ac=p(mt);ht=m(ac,"È invece un po’ più complessa la gestione delle immagini. Non so ancora quale sia il metodo migliore. Uno prevede di inserire tutte le immagini nella cartella "),ft=o(ac,"CODE",{});var sc=p(ft);vt=m(sc,"static"),sc.forEach(c),Et=m(ac," e poi richiamarle da lì:"),ac.forEach(c),bt=l(a),Pt=o(a,"PRE",{class:!0}),p(Pt).forEach(c),wt=l(a),yt=o(a,"P",{});var nc=p(yt);Ct=m(nc,"In alternativa si possono inserire in una cartella dentro "),Ht=o(nc,"CODE",{});var ec=p(Ht);qt=m(ec,"lib"),ec.forEach(c),jt=m(nc," e poi importarle come componenti:"),nc.forEach(c),zt=l(a),Mt=o(a,"PRE",{class:!0}),p(Mt).forEach(c),Dt=l(a),xt=o(a,"P",{});var tc=p(xt);Lt=m(tc,"Un altro aspetto da tenere presente quando si crea un blog è la necessità di gestire l’home page in maniera dinamica. Posso ottenere qualcosa di carino creando un componente "),Ot=o(tc,"CODE",{});var oc=p(Ot);It=m(oc,"src/routes/blog/index.svelte"),oc.forEach(c),St=m(tc," e usando la funzione "),At=o(tc,"A",{href:!0,rel:!0});var pc=p(At);Tt=m(pc,"load()"),pc.forEach(c),Rt=m(tc,"."),tc.forEach(c),Gt=l(a),Bt=o(a,"P",{});var lc=p(Bt);Ut=m(lc,"Comincio con l’importare nel componente un array con un riferimento a tutti file con estensione "),Kt=o(lc,"CODE",{});var cc=p(Kt);$t=m(cc,"md"),cc.forEach(c),Jt=m(lc," nella cartella:"),lc.forEach(c),Nt=l(a),Wt=o(a,"PRE",{class:!0}),p(Wt).forEach(c),Qt=l(a),_t=o(a,"P",{});var ic=p(_t);Ft=m(ic,"Estraggo da quell’array le informazioni che mi servono: "),Yt=o(ic,"CODE",{});var rc=p(Yt);Vt=m(rc,"path"),rc.forEach(c),Xt=m(ic,", ovvero la posizione del file, e "),Zt=o(ic,"CODE",{});var uc=p(Zt);ao=m(uc,"metadata"),uc.forEach(c),so=m(ic,", che non è altro che il contenuto YAML del file stesso"),ic.forEach(c),no=l(a),eo=o(a,"PRE",{class:!0}),p(eo).forEach(c),to=l(a),oo=o(a,"P",{});var kc=p(oo);po=m(kc,"Infine passo al componente quello che mi serve per creare l’indice:"),kc.forEach(c),lo=l(a),co=o(a,"PRE",{class:!0}),p(co).forEach(c),io=l(a),ro=o(a,"P",{});var gc=p(ro);uo=m(gc,"Il resto del componente è abbastanza semplice:"),gc.forEach(c),ko=l(a),go=o(a,"PRE",{class:!0}),p(go).forEach(c),mo=l(a),ho=o(a,"P",{});var dc=p(ho);fo=m(dc,"Un’altra funzione interessante sono i "),vo=o(dc,"A",{href:!0,rel:!0});var mc=p(vo);Eo=m(mc,"layouts"),mc.forEach(c),bo=m(dc,", ovvero delle specie di template. Per esempio, posso creare un componente "),Po=o(dc,"CODE",{});var hc=p(Po);wo=m(hc,"src/routes/blog/__layout.svelte"),hc.forEach(c),yo=m(dc,":"),dc.forEach(c),Co=l(a),Ho=o(a,"PRE",{class:!0}),p(Ho).forEach(c),qo=l(a),jo=o(a,"P",{});var fc=p(jo);zo=m(fc,"Per inserire un menù di sopra ogni pagina del blog."),fc.forEach(c),Mo=l(a),Do=o(a,"P",{});var vc=p(Do);xo=m(vc,"Un altro aspetto da sistemare riguarda il codice. O, meglio, come appare il codice. "),Lo=o(vc,"CODE",{});var Ec=p(Lo);Oo=m(Ec,"mdsvx"),Ec.forEach(c),Io=m(vc," ha la possibilità di applicare degli stili in maniera quasi automatica. Su questo punto non ho trovato molte indicazioni chiare. Per me ha funzionato scaricare uno stile da "),So=o(vc,"A",{href:!0,rel:!0});var bc=p(So);Ao=m(bc,"prismjs"),bc.forEach(c),To=m(vc,". Poi ho copiato il file css (che ho chiamato prism.css) nella cartella "),Ro=o(vc,"CODE",{});var Pc=p(Ro);Go=m(Pc,"static"),Pc.forEach(c),Bo=m(vc,". Infine ho aggiunto un riferimento al foglio di stile al file "),Uo=o(vc,"CODE",{});var wc=p(Uo);Ko=m(wc,"src\\app.html"),wc.forEach(c),$o=m(vc,"-"),vc.forEach(c),Jo=l(a),No=o(a,"PRE",{class:!0}),p(No).forEach(c),Wo=l(a),Qo=o(a,"P",{});var yc=p(Qo);_o=m(yc,"In alternativa posso inserire nel layout:"),yc.forEach(c),Fo=l(a),Yo=o(a,"PRE",{class:!0}),p(Yo).forEach(c),Vo=l(a),Xo=o(a,"P",{});var Cc=p(Xo);Zo=m(Cc,"Un altro problema che può sorgere è legato a dove viene caricato il blog. Se lo carico su un dominio unico, per esempio su "),ap=o(Cc,"CODE",{});var Hc=p(ap);sp=m(Hc,"test.stranianelli.com"),Hc.forEach(c),np=m(Cc," allora posso accedere alle varie pagine andando su indirizzi simili a "),ep=o(Cc,"CODE",{});var qc=p(ep);tp=m(qc,"test.stranianelli/blog/first-post"),qc.forEach(c),op=m(Cc,"."),Cc.forEach(c),pp=l(a),lp=o(a,"P",{});var jc=p(lp);cp=m(jc,"Però le cose sono diverse se carico il tutto in una cartella non root. Per poter far funzionare il tutto devo modificare il file "),ip=o(jc,"CODE",{});var zc=p(ip);rp=m(zc,"svelte.config.js"),zc.forEach(c),up=m(jc,", per esempio così:"),jc.forEach(c),kp=l(a),gp=o(a,"PRE",{class:!0}),p(gp).forEach(c),dp=l(a),mp=o(a,"P",{});var Mc=p(mp);hp=m(Mc,"Questo mi permette di configurare meglio i link usando qualcosa di simile a:"),Mc.forEach(c),fp=l(a),vp=o(a,"PRE",{class:!0}),p(vp).forEach(c),Ep=l(a),bp=o(a,"P",{});var Dc=p(bp);Pp=m(Dc,"Per oggi è tutto. Il codice è disponibile su GitHub:"),Dc.forEach(c),wp=l(a),yp=o(a,"UL",{});var xc=p(yp);Cp=o(xc,"LI",{});var Lc=p(Cp);Hp=o(Lc,"A",{href:!0,rel:!0});var Oc=p(Hp);qp=m(Oc,"MEMENTO - SvelteKit & GitHub Pages"),Oc.forEach(c),Lc.forEach(c),xc.forEach(c),jp=l(a),zp=o(a,"P",{});var Ic=p(zp);Mp=m(Ic,"Il blog invece è visibile all’indirizzo "),Dp=o(Ic,"A",{href:!0,rel:!0});var Sc=p(Dp);xp=m(Sc,"el3um4s.github.io/memento-sveltekit-and-github-pages"),Sc.forEach(c),Lp=m(Ic,"."),Ic.forEach(c),Op=l(a),Ip=o(a,"P",{});var Ac=p(Ip);Sp=m(Ac,"Ricordo inoltre l’indirizzo del mio Patreon:"),Ac.forEach(c),Ap=l(a),Tp=o(a,"UL",{});var Tc=p(Tp);Rp=o(Tc,"LI",{});var Rc=p(Rp);Gp=o(Rc,"A",{href:!0,rel:!0});var Gc=p(Gp);Bp=m(Gc,"Patreon"),Gc.forEach(c),Rc.forEach(c),Tc.forEach(c),this.h()},h(){i(H,"href","https://blog.stranianelli.com/svelte-et-github/"),i(H,"rel","nofollow"),i(R,"href","https://kit.svelte.dev/"),i(R,"rel","nofollow"),i(K,"class","language-bash"),i(Q,"class","language-bash"),i(V,"href","https://www.npmjs.com/package/gh-pages"),i(V,"rel","nofollow"),i(sa,"class","language-bash"),i(ia,"class","language-json"),i(da,"class","language-js"),i(va,"href","https://www.npmjs.com/package/@sveltejs/adapter-static"),i(va,"rel","nofollow"),i(wa,"class","language-bash"),i(Ma,"class","language-js"),i(Ia,"class","language-bash"),i(ls,"href","https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/"),i(ls,"rel","nofollow"),i(js,"class","language-bash"),i(Ss,"class","language-bash"),i($s,"class","language-bash"),i(kn,"href","https://svelteland.github.io/svelte-kit-blog-demo"),i(kn,"rel","nofollow"),i(fn,"href","https://www.youtube.com/playlist?list=PLm_Qt4aKpfKgonq1zwaCS6kOD-nbOKx7V"),i(fn,"rel","nofollow"),i(Pn,"href","https://strapi.io/blog/how-to-create-a-blog-with-svelte-kit-strapi"),i(Pn,"rel","nofollow"),i(Hn,"href","https://dev.to/ladvace/how-to-create-a-blog-with-sveltekit-and-dev-to-api-5h7e"),i(Hn,"rel","nofollow"),i(Dn,"href","https://blog.webjeda.com/"),i(Dn,"rel","nofollow"),i(An,"href","https://github.com/sindresorhus/trash-cli"),i(An,"rel","nofollow"),i(Nn,"class","language-bash"),i(ne,"class","language-json"),i(pe,"href","https://mdsvex.pngwn.io/"),i(pe,"rel","nofollow"),i(ie,"class","language-bash"),i(ge,"href","https://github.com/svelte-add/mdsvex"),i(ge,"rel","nofollow"),i(fe,"class","language-bash"),i(De,"class","language-js"),i(Re,"class","language-js"),i(Fe,"class","language-md"),i(ct,"class","language-md"),i(gt,"class","language-md"),i(Pt,"class","language-html"),i(Mt,"class","language-html"),i(At,"href","https://kit.svelte.dev/docs#loading"),i(At,"rel","nofollow"),i(Wt,"class","language-html"),i(eo,"class","language-html"),i(co,"class","language-html"),i(go,"class","language-html"),i(vo,"href","https://kit.svelte.dev/docs#layouts"),i(vo,"rel","nofollow"),i(Ho,"class","language-html"),i(So,"href","https://prismjs.com/"),i(So,"rel","nofollow"),i(No,"class","language-html"),i(Yo,"class","language-html"),i(gp,"class","language-js"),i(vp,"class","language-html"),i(Hp,"href","https://github.com/el3um4s/memento-sveltekit-and-github-pages"),i(Hp,"rel","nofollow"),i(Dp,"href","https://el3um4s.github.io/memento-sveltekit-and-github-pages/"),i(Dp,"rel","nofollow"),i(Gp,"href","https://www.patreon.com/el3um4s"),i(Gp,"rel","nofollow")},m(a,e){r(a,s,e),u(s,n),r(a,P,e),r(a,w,e),u(w,C),u(w,H),u(H,j),u(w,z),r(a,M,e),r(a,D,e),u(D,x),u(D,L),u(L,O),u(D,I),r(a,S,e),r(a,A,e),u(A,T),u(A,R),u(R,G),u(A,B),r(a,U,e),r(a,K,e),K.innerHTML='<code class="language-bash"><span class="token function">npm</span> init svelte@next my-app</code>',r(a,$,e),r(a,J,e),u(J,N),r(a,W,e),r(a,Q,e),Q.innerHTML='<code class="language-bash"><span class="token function">npm</span> i</code>',r(a,_,e),r(a,F,e),u(F,Y),u(F,V),u(V,X),u(F,Z),r(a,aa,e),r(a,sa,e),sa.innerHTML='<code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> gh-pages --save-dev</code>',r(a,na,e),r(a,ea,e),u(ea,ta),u(ea,oa),u(oa,pa),u(ea,la),r(a,ca,e),r(a,ia,e),ia.innerHTML='<code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"node ./gh-pages.js"</span>\n<span class="token punctuation">&#125;</span></code>',r(a,ra,e),r(a,ua,e),u(ua,ka),r(a,ga,e),r(a,da,e),da.innerHTML='<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> publish <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">\'gh-pages\'</span><span class="token punctuation">;</span>\n\n<span class="token function">publish</span><span class="token punctuation">(</span>\n <span class="token string">\'build\'</span><span class="token punctuation">,</span> <span class="token comment">// path to public directory</span>\n <span class="token punctuation">&#123;</span>\n  branch<span class="token operator">:</span> <span class="token string">\'gh-pages\'</span><span class="token punctuation">,</span>\n  repo<span class="token operator">:</span> <span class="token string">\'https://github.com/el3um4s/memento-sveltekit-and-github-pages.git\'</span><span class="token punctuation">,</span> <span class="token comment">// Update to point to your repository</span>\n  user<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n   name<span class="token operator">:</span> <span class="token string">\'Samuele de Tomasi\'</span><span class="token punctuation">,</span> <span class="token comment">// update to use your name</span>\n   email<span class="token operator">:</span> <span class="token string">\'samuele@stranianelli.com\'</span> <span class="token comment">// Update to use your email</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  dotfiles<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Deploy Complete!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',r(a,ma,e),r(a,ha,e),u(ha,fa),u(ha,va),u(va,Ea),u(ha,ba),r(a,Pa,e),r(a,wa,e),wa.innerHTML='<code class="language-bash"><span class="token function">npm</span> i -D @sveltejs/adapter-static@next</code>',r(a,ya,e),r(a,Ca,e),u(Ca,Ha),u(Ca,qa),u(qa,ja),r(a,za,e),r(a,Ma,e),Ma.innerHTML='<code class="language-js"><span class="token keyword">import</span> preprocess <span class="token keyword">from</span> <span class="token string">\'svelte-preprocess\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> adapter <span class="token keyword">from</span> <span class="token string">\'@sveltejs/adapter-static\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">/** @type &#123;import(\'@sveltejs/kit\').Config&#125; */</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n <span class="token comment">// Consult https://github.com/sveltejs/svelte-preprocess</span>\n <span class="token comment">// for more information about preprocessors</span>\n preprocess<span class="token operator">:</span> <span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n kit<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n <span class="token comment">// hydrate the &lt;div id="svelte"> element in src/app.html</span>\n  target<span class="token operator">:</span> <span class="token string">\'#svelte\'</span><span class="token punctuation">,</span>\n  adapter<span class="token operator">:</span> <span class="token function">adapter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  <span class="token comment">// default options are shown</span>\n   pages<span class="token operator">:</span> <span class="token string">\'build\'</span><span class="token punctuation">,</span>\n   assets<span class="token operator">:</span> <span class="token string">\'build\'</span><span class="token punctuation">,</span>\n   fallback<span class="token operator">:</span> <span class="token keyword">null</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span></code>',r(a,Da,e),r(a,xa,e),u(xa,La),r(a,Oa,e),r(a,Ia,e),Ia.innerHTML='<code class="language-bash"><span class="token function">npm</span> run build</code>',r(a,Sa,e),r(a,Aa,e),u(Aa,Ta),u(Aa,Ra),u(Ra,Ga),u(Aa,Ba),r(a,Ua,e),f(Ka,a,e),r(a,$a,e),r(a,Ja,e),u(Ja,Na),u(Ja,Wa),u(Wa,Qa),u(Ja,_a),r(a,Fa,e),r(a,Ya,e),u(Ya,Va),u(Ya,Xa),u(Xa,Za),u(Ya,as),r(a,ss,e),r(a,ns,e),u(ns,es),u(es,ts),u(ts,os),u(es,ps),u(es,ls),u(ls,cs),u(es,is),u(ns,rs),u(ns,us),u(us,ks),u(ks,gs),u(us,ds),r(a,ms,e),r(a,hs,e),u(hs,fs),u(hs,vs),u(vs,Es),u(hs,bs),r(a,Ps,e),r(a,ws,e),u(ws,ys),u(ys,Cs),u(ws,Hs),r(a,qs,e),r(a,js,e),js.innerHTML='<code class="language-bash">test.stranianelli.com</code>',r(a,zs,e),r(a,Ms,e),u(Ms,Ds),u(Ms,xs),u(xs,Ls),u(Ms,Os),r(a,Is,e),r(a,Ss,e),Ss.innerHTML='<code class="language-bash"><span class="token function">npm</span> run deploy</code>',r(a,As,e),r(a,Ts,e),u(Ts,Rs),r(a,Gs,e),r(a,Bs,e),u(Bs,Us),r(a,Ks,e),r(a,$s,e),$s.innerHTML='<code class="language-bash"><span class="token function">npm</span> run dev -- --open</code>',r(a,Js,e),r(a,Ns,e),u(Ns,Ws),r(a,Qs,e),r(a,_s,e),u(_s,Fs),u(_s,Ys),u(Ys,Vs),u(_s,Xs),u(_s,Zs),u(Zs,an),u(_s,sn),r(a,nn,e),r(a,en,e),u(en,tn),r(a,on,e),r(a,pn,e),u(pn,ln),r(a,cn,e),r(a,rn,e),u(rn,un),u(un,kn),u(kn,gn),u(un,dn),u(rn,mn),u(rn,hn),u(hn,fn),u(fn,vn),u(rn,En),u(rn,bn),u(bn,Pn),u(Pn,wn),u(rn,yn),u(rn,Cn),u(Cn,Hn),u(Hn,qn),r(a,jn,e),r(a,zn,e),u(zn,Mn),u(zn,Dn),u(Dn,xn),u(zn,Ln),r(a,On,e),r(a,In,e),u(In,Sn),u(In,An),u(An,Tn),u(In,Rn),u(In,Gn),u(Gn,Bn),u(In,Un),u(In,Kn),u(Kn,$n),r(a,Jn,e),r(a,Nn,e),Nn.innerHTML='<code class="language-bash"><span class="token function">npm</span> i -D trash-cli</code>',r(a,Wn,e),r(a,Qn,e),u(Qn,_n),u(Qn,Fn),u(Fn,Yn),u(Qn,Vn),u(Qn,Xn),u(Xn,Zn),u(Qn,ae),r(a,se,e),r(a,ne,e),ne.innerHTML='<code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"npm run clean &amp;&amp; svelte-kit build"</span><span class="token punctuation">,</span>\n <span class="token property">"clean"</span><span class="token operator">:</span> <span class="token string">"trash build"</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',r(a,ee,e),r(a,te,e),u(te,oe),u(te,pe),u(pe,le),r(a,ce,e),r(a,ie,e),ie.innerHTML='<code class="language-bash"><span class="token function">npm</span> i -D mdsvex</code>',r(a,re,e),r(a,ue,e),u(ue,ke),u(ue,ge),u(ge,de),u(ue,me),r(a,he,e),r(a,fe,e),fe.innerHTML='<code class="language-bash">npx svelte-add@latest mdsvex</code>',r(a,ve,e),r(a,Ee,e),u(Ee,be),u(be,Pe),u(Ee,we),u(Ee,ye),u(ye,Ce),u(Ee,He),u(Ee,qe),u(qe,je),u(Ee,ze),r(a,Me,e),r(a,De,e),De.innerHTML='<code class="language-js"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  <span class="token string">"extensions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".svelte.md"</span><span class="token punctuation">,</span> <span class="token string">".md"</span><span class="token punctuation">,</span> <span class="token string">".svx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token string">"smartypants"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    <span class="token string">"dashes"</span><span class="token operator">:</span> <span class="token string">"oldschool"</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\n  <span class="token string">"remarkPlugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"rehypePlugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span></code>',r(a,xe,e),r(a,Le,e),u(Le,Oe),u(Le,Ie),u(Ie,Se),u(Le,Ae),r(a,Te,e),r(a,Re,e),Re.innerHTML='<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>\n mdsvex\n<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"mdsvex"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> mdsvexConfig <span class="token keyword">from</span> <span class="token string">"./mdsvex.config.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> preprocess <span class="token keyword">from</span> <span class="token string">\'svelte-preprocess\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> adapter <span class="token keyword">from</span> <span class="token string">\'@sveltejs/adapter-static\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">/** @type &#123;import(\'@sveltejs/kit\').Config&#125; */</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n <span class="token string">"extensions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".svelte"</span><span class="token punctuation">,</span> <span class="token operator">...</span>mdsvexConfig<span class="token punctuation">.</span>extensions<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  preprocess<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mdsvex</span><span class="token punctuation">(</span>mdsvexConfig<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  kit<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n   target<span class="token operator">:</span> <span class="token string">\'#svelte\'</span><span class="token punctuation">,</span>\n   adapter<span class="token operator">:</span> <span class="token function">adapter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n\tpages<span class="token operator">:</span> <span class="token string">\'build\'</span><span class="token punctuation">,</span>\n\tassets<span class="token operator">:</span> <span class="token string">\'build\'</span><span class="token punctuation">,</span>\n\tfallback<span class="token operator">:</span> <span class="token keyword">null</span>\n   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span></code>',r(a,Ge,e),r(a,Be,e),u(Be,Ue),u(Be,Ke),u(Ke,$e),u(Be,Je),u(Be,Ne),u(Ne,We),u(Be,Qe),r(a,_e,e),r(a,Fe,e),Fe.innerHTML='<code class="language-md"><span class="token front-matter-block"><span class="token punctuation">---</span>\n<span class="token font-matter yaml language-yaml">file: hello-world.md\ntitle: Hello World</span>\n<span class="token punctuation">---</span></span>\n\nHi!</code>',r(a,Ye,e),r(a,Ve,e),u(Ve,Xe),u(Ve,Ze),u(Ze,at),u(Ve,st),u(Ve,nt),u(nt,et),r(a,tt,e),r(a,ot,e),u(ot,pt),r(a,lt,e),r(a,ct,e),ct.innerHTML='<code class="language-md"><span class="token title important"><span class="token punctuation">#</span> &#123;title&#125;</span></code>',r(a,it,e),r(a,rt,e),u(rt,ut),r(a,kt,e),r(a,gt,e),gt.innerHTML='<code class="language-md"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>\n import Box from "$lib/Box.svelte";\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Box</span> <span class="token punctuation">/></span></span></code>',r(a,dt,e),r(a,mt,e),u(mt,ht),u(mt,ft),u(ft,vt),u(mt,Et),r(a,bt,e),r(a,Pt,e),Pt.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code>',r(a,wt,e),r(a,yt,e),u(yt,Ct),u(yt,Ht),u(Ht,qt),u(yt,jt),r(a,zt,e),r(a,Mt,e),Mt.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>\n import ImageSrc from "$lib/assets/drums.png";\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;ImageSrc&#125;</span> <span class="token punctuation">/></span></span></code>',r(a,Dt,e),r(a,xt,e),u(xt,Lt),u(xt,Ot),u(Ot,It),u(xt,St),u(xt,At),u(At,Tt),u(xt,Rt),r(a,Gt,e),r(a,Bt,e),u(Bt,Ut),u(Bt,Kt),u(Kt,$t),u(Bt,Jt),r(a,Nt,e),r(a,Wt,e),Wt.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n const allPosts = import.meta.glob("./**/*.md");\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>',r(a,Qt,e),r(a,_t,e),u(_t,Ft),u(_t,Yt),u(Yt,Vt),u(_t,Xt),u(_t,Zt),u(Zt,ao),u(_t,so),r(a,no,e),r(a,eo,e),eo.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n const allPosts = import.meta.glob("./**/*.md");\n let body = [];\n for (let path in allPosts) &#123;\n  body.push(\n   allPosts[path]().then( (&#123;metadata&#125;) => &#123;\n    return &#123; path, metadata&#125;\n   &#125;)\n  );  \n &#125;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>',r(a,to,e),r(a,oo,e),u(oo,po),r(a,lo,e),r(a,co,e),co.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n// ...\n export async function load() &#123;\n  const posts = await Promise.all(body);\n   return &#123;\n    props: &#123;posts&#125;\n   &#125;\n &#125;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>',r(a,io,e),r(a,ro,e),u(ro,uo),r(a,ko,e),r(a,go,e),go.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>\n export let posts;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n &#123;#each  posts as &#123;path, metadata: &#123;title&#125;&#125; &#125;\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>\n   &lt;a href=&#123;&#96;/blog/$&#123;path.replace(".md","")&#125;&#96;&#125;>&#123;title&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n &#123;/each&#125;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code>',r(a,mo,e),r(a,ho,e),u(ho,fo),u(ho,vo),u(vo,Eo),u(ho,bo),u(ho,Po),u(Po,wo),u(ho,yo),r(a,Co,e),r(a,Ho,e),Ho.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">sveltekit:</span>prefetch</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">sveltekit:</span>prefetch</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">sveltekit:</span>prefetch</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code>',r(a,qo,e),r(a,jo,e),u(jo,zo),r(a,Mo,e),r(a,Do,e),u(Do,xo),u(Do,Lo),u(Lo,Oo),u(Do,Io),u(Do,So),u(So,Ao),u(Do,To),u(Do,Ro),u(Ro,Go),u(Do,Bo),u(Do,Uo),u(Uo,Ko),u(Do,$o),r(a,Jo,e),r(a,No,e),No.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prism.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code>',r(a,Wo,e),r(a,Qo,e),u(Qo,_o),r(a,Fo,e),r(a,Yo,e),Yo.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prism.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span></code>',r(a,Vo,e),r(a,Xo,e),u(Xo,Zo),u(Xo,ap),u(ap,sp),u(Xo,np),u(Xo,ep),u(ep,tp),u(Xo,op),r(a,pp,e),r(a,lp,e),u(lp,cp),u(lp,ip),u(ip,rp),u(lp,up),r(a,kp,e),r(a,gp,e),gp.innerHTML='<code class="language-js">kit<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n\t\tpaths<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n\t\t\tbase<span class="token operator">:</span> <span class="token string">\'/memento-sveltekit-and-github-pages\'</span>\n\t\t<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">&#125;</span></code>',r(a,dp,e),r(a,mp,e),u(mp,hp),r(a,fp,e),r(a,vp,e),vp.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>\n    import &#123; base &#125; from \'$app/paths\';\n\n    export let posts;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n    &#123;#each  posts as &#123;path, metadata: &#123;title&#125;&#125; &#125;\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>\n            &lt;a href=&#123;&#96;$&#123;base&#125;/blog/$&#123;path.replace(".md","")&#125;&#96;&#125;>&#123;title&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n    &#123;/each&#125;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code>',r(a,Ep,e),r(a,bp,e),u(bp,Pp),r(a,wp,e),r(a,yp,e),u(yp,Cp),u(Cp,Hp),u(Hp,qp),r(a,jp,e),r(a,zp,e),u(zp,Mp),u(zp,Dp),u(Dp,xp),u(zp,Lp),r(a,Op,e),r(a,Ip,e),u(Ip,Sp),r(a,Ap,e),r(a,Tp,e),u(Tp,Rp),u(Rp,Gp),u(Gp,Bp),Up=!0},p:k,i(a){Up||(v(Ka.$$.fragment,a),Up=!0)},o(a){E(Ka.$$.fragment,a),Up=!1},d(a){a&&c(s),a&&c(P),a&&c(w),a&&c(M),a&&c(D),a&&c(S),a&&c(A),a&&c(U),a&&c(K),a&&c($),a&&c(J),a&&c(W),a&&c(Q),a&&c(_),a&&c(F),a&&c(aa),a&&c(sa),a&&c(na),a&&c(ea),a&&c(ca),a&&c(ia),a&&c(ra),a&&c(ua),a&&c(ga),a&&c(da),a&&c(ma),a&&c(ha),a&&c(Pa),a&&c(wa),a&&c(ya),a&&c(Ca),a&&c(za),a&&c(Ma),a&&c(Da),a&&c(xa),a&&c(Oa),a&&c(Ia),a&&c(Sa),a&&c(Aa),a&&c(Ua),b(Ka,a),a&&c($a),a&&c(Ja),a&&c(Fa),a&&c(Ya),a&&c(ss),a&&c(ns),a&&c(ms),a&&c(hs),a&&c(Ps),a&&c(ws),a&&c(qs),a&&c(js),a&&c(zs),a&&c(Ms),a&&c(Is),a&&c(Ss),a&&c(As),a&&c(Ts),a&&c(Gs),a&&c(Bs),a&&c(Ks),a&&c($s),a&&c(Js),a&&c(Ns),a&&c(Qs),a&&c(_s),a&&c(nn),a&&c(en),a&&c(on),a&&c(pn),a&&c(cn),a&&c(rn),a&&c(jn),a&&c(zn),a&&c(On),a&&c(In),a&&c(Jn),a&&c(Nn),a&&c(Wn),a&&c(Qn),a&&c(se),a&&c(ne),a&&c(ee),a&&c(te),a&&c(ce),a&&c(ie),a&&c(re),a&&c(ue),a&&c(he),a&&c(fe),a&&c(ve),a&&c(Ee),a&&c(Me),a&&c(De),a&&c(xe),a&&c(Le),a&&c(Te),a&&c(Re),a&&c(Ge),a&&c(Be),a&&c(_e),a&&c(Fe),a&&c(Ye),a&&c(Ve),a&&c(tt),a&&c(ot),a&&c(lt),a&&c(ct),a&&c(it),a&&c(rt),a&&c(kt),a&&c(gt),a&&c(dt),a&&c(mt),a&&c(bt),a&&c(Pt),a&&c(wt),a&&c(yt),a&&c(zt),a&&c(Mt),a&&c(Dt),a&&c(xt),a&&c(Gt),a&&c(Bt),a&&c(Nt),a&&c(Wt),a&&c(Qt),a&&c(_t),a&&c(no),a&&c(eo),a&&c(to),a&&c(oo),a&&c(lo),a&&c(co),a&&c(io),a&&c(ro),a&&c(ko),a&&c(go),a&&c(mo),a&&c(ho),a&&c(Co),a&&c(Ho),a&&c(qo),a&&c(jo),a&&c(Mo),a&&c(Do),a&&c(Jo),a&&c(No),a&&c(Wo),a&&c(Qo),a&&c(Fo),a&&c(Yo),a&&c(Vo),a&&c(Xo),a&&c(pp),a&&c(lp),a&&c(kp),a&&c(gp),a&&c(dp),a&&c(mp),a&&c(fp),a&&c(vp),a&&c(Ep),a&&c(bp),a&&c(wp),a&&c(yp),a&&c(jp),a&&c(zp),a&&c(Op),a&&c(Ip),a&&c(Ap),a&&c(Tp)}}}const H={title:"SvelteKit & GitHub Pages - Italian",lang:"Italian"},{title:q,lang:j}=H;export default class extends a{constructor(a){super(),s(this,a,null,C,n,{})}}export{H as metadata};
